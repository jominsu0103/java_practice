HTTP의 5가지 대표 특징
1. 무상태성 (Stateless)
HTTP는 무상태 프로토콜로, 각 요청 간에 서버가 클라이언트의 상태를 유지하지 않습니다. 즉, 요청 간에 독립적입니다.
2. 비연결성 (Connectionless)
클라이언트가 요청을 보내고 서버가 응답을 보내면, 그 연결은 끊어집니다. 이후의 요청은 새로운 연결을 통해 이루어집니다.
3. 유연한 데이터 표현 (Flexible Data Representation)
HTTP는 텍스트, 이미지, 비디오 등 다양한 형태의 데이터를 전송할 수 있습니다. MIME 타입을 통해 데이터의 형식을 지정합니다.
4. 확장성 (Extensibility)
HTTP는 새로운 기능을 추가하기 위해 확장될 수 있습니다. 예를 들어, 새로운 헤더 필드를 추가하여 기능을 확장할 수 있습니다.
5. 캐싱 (Caching)
HTTP는 클라이언트와 서버 간의 데이터 전송을 줄이기 위해 캐싱을 지원합니다. 이를 통해 성능을 향상시키고 네트워크 트래픽을 줄일 수 있습니다.

REST와 RESTful API
REST (Representational State Transfer)
REST는 웹 서비스 설계를 위한 아키텍처 스타일입니다. 자원을 URI로 표현하고, HTTP 메서드(GET, POST, PUT, DELETE 등)를 통해 자원을 조작합니다.
RESTful API
RESTful API는 REST 원칙을 준수하여 설계된 API입니다. 클라이언트와 서버 간의 상호작용을 단순화하고, 일관된 인터페이스를 제공합니다.

"google.com" 검색 시 일어나는 과정
1. DNS 조회
사용자가 브라우저에 google.com을 입력하면, 브라우저는 DNS 서버에 google.com의 IP 주소를 요청합니다.
DNS 서버는 google.com의 IP 주소를 반환합니다.
2. TCP 연결 설정
브라우저는 반환된 IP 주소와 포트 80(HTTP) 또는 443(HTTPS)으로 TCP 연결을 설정합니다. 이 과정은 3-way handshake (SYN, SYN-ACK, ACK)로 이루어집니다.
3. HTTP 요청 전송
TCP 연결이 설정되면, 브라우저는 HTTP GET 요청을 서버에 전송합니다.
요청에는 Host: google.com 헤더와 함께 필요한 추가 헤더가 포함됩니다.
4. 서버 처리
서버는 요청을 수신하고, 요청된 자원(예: index.html)을 찾습니다.
서버는 자원을 찾으면 HTTP 응답을 생성하고, 응답 본문에 자원을 포함시킵니다.
5. HTTP 응답 수신
브라우저는 서버로부터 HTTP 응답을 수신합니다. 응답에는 상태 코드(예: 200 OK)와 함께 요청된 자원이 포함됩니다.
6. 렌더링
브라우저는 수신한 HTML 문서를 파싱하고, 필요한 추가 자원(CSS, JavaScript, 이미지 등)을 다시 요청합니다.
모든 자원이 로드되면, 브라우저는 페이지를 렌더링하여 사용자에게 표시합니다.
7. 인터랙션
사용자는 검색 창에 검색어를 입력하고, 브라우저는 이를 서버에 다시 요청하여 검색 결과를 표시합니다.
이 과정은 매우 복잡하며, 각 단계에서 다양한 최적화와 보안 메커니즘이 적용될 수 있습니다.